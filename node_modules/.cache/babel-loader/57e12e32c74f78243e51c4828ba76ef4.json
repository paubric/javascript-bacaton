{"ast":null,"code":"import _classCallCheck from \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _possibleConstructorReturn from \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _createClass from \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/src/components/flashcard.js\";\nimport React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Markdown from \"react-remarkable\";\n\nvar Flashcard =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Flashcard, _Component);\n\n  _createClass(Flashcard, [{\n    key: \"getRandomData\",\n    value: function getRandomData() {\n      // Get number of items\n      var bacDataLength = this.state.bacData[\"opere\"].length; // Get random item index\n\n      var itemIndex = Math.floor(Math.random() * bacDataLength); // Get item name\n\n      var itemName = this.state.bacData[\"opere\"][itemIndex][\"nume\"]; // Get keys of item and number of keys\n\n      var keys = Object.keys(this.state.bacData[\"opere\"][itemIndex]);\n      var keysLength = keys.length; // Get random key index\n\n      var keyIndex = Math.floor(Math.random() * keysLength); // Get target text\n\n      var text = this.state.bacData[\"opere\"][itemIndex][keys[keyIndex]];\n      this.state = {\n        key: keys[keyIndex],\n        value: text,\n        name: itemName\n      };\n    }\n  }]);\n\n  function Flashcard() {\n    var _this;\n\n    _classCallCheck(this, Flashcard);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Flashcard).call(this));\n    _this.state = {\n      bacData: require(\"../bac.json\"),\n      isVisible: false\n    };\n\n    _this.setVisible = function () {\n      var state = _this.state;\n      state[\"isVisible\"] = true;\n\n      _this.setState(state);\n    };\n\n    _this.getAnswer = function () {\n      return React.createElement(React.Fragment, null, React.createElement(Markdown, {\n        source: _this.state[\"value\"],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47\n        },\n        __self: this\n      }));\n    };\n\n    _this.getRandomData();\n\n    return _this;\n  }\n\n  _createClass(Flashcard, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(React.Fragment, null, React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, this.state[\"name\"]), React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61\n        },\n        __self: this\n      }, this.state[\"key\"]), React.createElement(Button, {\n        onClick: this.setVisible,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62\n        },\n        __self: this\n      }, \"Arata\"), this.isVisible && this.getAnswer());\n    }\n  }]);\n\n  return Flashcard;\n}(Component);\n\nexport default Flashcard;","map":{"version":3,"sources":["/home/paubric/Projects/Experiments/javascript-bacaton/javascript-bacaton/src/components/flashcard.js"],"names":["React","Component","Button","Markdown","Flashcard","bacDataLength","state","bacData","length","itemIndex","Math","floor","random","itemName","keys","Object","keysLength","keyIndex","text","key","value","name","require","isVisible","setVisible","setState","getAnswer","getRandomData"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,OAAOC,QAAP,MAAqB,kBAArB;;IAEMC,S;;;;;;;oCAMY;AACd;AACA,UAAMC,aAAa,GAAG,KAAKC,KAAL,CAAWC,OAAX,CAAmB,OAAnB,EAA4BC,MAAlD,CAFc,CAId;;AACA,UAAMC,SAAS,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBP,aAA3B,CAAlB,CALc,CAOd;;AACA,UAAMQ,QAAQ,GAAG,KAAKP,KAAL,CAAWC,OAAX,CAAmB,OAAnB,EAA4BE,SAA5B,EAAuC,MAAvC,CAAjB,CARc,CAUd;;AACA,UAAMK,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAY,KAAKR,KAAL,CAAWC,OAAX,CAAmB,OAAnB,EAA4BE,SAA5B,CAAZ,CAAb;AACA,UAAMO,UAAU,GAAGF,IAAI,CAACN,MAAxB,CAZc,CAcd;;AACA,UAAMS,QAAQ,GAAGP,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBI,UAA3B,CAAjB,CAfc,CAiBd;;AACA,UAAME,IAAI,GAAG,KAAKZ,KAAL,CAAWC,OAAX,CAAmB,OAAnB,EAA4BE,SAA5B,EAAuCK,IAAI,CAACG,QAAD,CAA3C,CAAb;AAEA,WAAKX,KAAL,GAAa;AACXa,QAAAA,GAAG,EAAEL,IAAI,CAACG,QAAD,CADE;AAEXG,QAAAA,KAAK,EAAEF,IAFI;AAGXG,QAAAA,IAAI,EAAER;AAHK,OAAb;AAKD;;;AAgBD,uBAAc;AAAA;;AAAA;;AACZ;AADY,UA9CdP,KA8Cc,GA9CN;AACNC,MAAAA,OAAO,EAAEe,OAAO,CAAC,aAAD,CADV;AAENC,MAAAA,SAAS,EAAE;AAFL,KA8CM;;AAAA,UAddC,UAcc,GAdD,YAAM;AACjB,UAAMlB,KAAK,GAAG,MAAKA,KAAnB;AACAA,MAAAA,KAAK,CAAC,WAAD,CAAL,GAAqB,IAArB;;AACA,YAAKmB,QAAL,CAAcnB,KAAd;AACD,KAUa;;AAAA,UARdoB,SAQc,GARF,YAAM;AAChB,aACE,0CACE,oBAAC,QAAD;AAAU,QAAA,MAAM,EAAE,MAAKpB,KAAL,CAAW,OAAX,CAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF;AAKD,KAEa;;AAEZ,UAAKqB,aAAL;;AAFY;AAGb;;;;6BAEQ;AACP,aACE,0CACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKrB,KAAL,CAAW,MAAX,CAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAK,KAAKA,KAAL,CAAW,KAAX,CAAL,CAFF,EAGE,oBAAC,MAAD;AAAQ,QAAA,OAAO,EAAE,KAAKkB,UAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAHF,EAIG,KAAKD,SAAL,IAAkB,KAAKG,SAAL,EAJrB,CADF;AAQD;;;;EA7DqBzB,S;;AAgExB,eAAeG,SAAf","sourcesContent":["import React, { Component } from \"react\";\nimport { Button } from \"react-bootstrap\";\nimport Markdown from \"react-remarkable\";\n\nclass Flashcard extends Component {\n  state = {\n    bacData: require(\"../bac.json\"),\n    isVisible: false\n  };\n\n  getRandomData() {\n    // Get number of items\n    const bacDataLength = this.state.bacData[\"opere\"].length;\n\n    // Get random item index\n    const itemIndex = Math.floor(Math.random() * bacDataLength);\n\n    // Get item name\n    const itemName = this.state.bacData[\"opere\"][itemIndex][\"nume\"];\n\n    // Get keys of item and number of keys\n    const keys = Object.keys(this.state.bacData[\"opere\"][itemIndex]);\n    const keysLength = keys.length;\n\n    // Get random key index\n    const keyIndex = Math.floor(Math.random() * keysLength);\n\n    // Get target text\n    const text = this.state.bacData[\"opere\"][itemIndex][keys[keyIndex]];\n\n    this.state = {\n      key: keys[keyIndex],\n      value: text,\n      name: itemName\n    };\n  }\n\n  setVisible = () => {\n    const state = this.state;\n    state[\"isVisible\"] = true;\n    this.setState(state);\n  };\n\n  getAnswer = () => {\n    return (\n      <>\n        <Markdown source={this.state[\"value\"]} />\n      </>\n    );\n  };\n\n  constructor() {\n    super();\n    this.getRandomData();\n  }\n\n  render() {\n    return (\n      <>\n        <h1>{this.state[\"name\"]}</h1>\n        <h2>{this.state[\"key\"]}</h2>\n        <Button onClick={this.setVisible}>Arata</Button>\n        {this.isVisible && this.getAnswer()}\n      </>\n    );\n  }\n}\n\nexport default Flashcard;\n"]},"metadata":{},"sourceType":"module"}